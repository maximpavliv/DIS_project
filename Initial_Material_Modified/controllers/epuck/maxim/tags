!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	epuckController.c	58;"	d	file:
AXLE_LENGTH	epuckController.c	41;"	d	file:
BRT_WEIGHT	epuckController.c	55;"	d	file:
FLOCK_SIZE	epuckController.c	37;"	d	file:
MAX_SENS	epuckController.c	35;"	d	file:
MAX_SPEED	epuckController.c	36;"	d	file:
MIGRATION_WEIGHT	epuckController.c	53;"	d	file:
MIGRATORY_URGE	epuckController.c	56;"	d	file:
MIN_SENS	epuckController.c	34;"	d	file:
M_PI	epuckController.c	39;"	d	file:
NB_SENSORS	epuckController.c	33;"	d	file:
RULE1_THRESHOLD	epuckController.c	46;"	d	file:
RULE1_WEIGHT	epuckController.c	47;"	d	file:
RULE2_THRESHOLD	epuckController.c	49;"	d	file:
RULE2_WEIGHT	epuckController.c	50;"	d	file:
RULE3_WEIGHT	epuckController.c	52;"	d	file:
SPEED_UNIT_RADS	epuckController.c	42;"	d	file:
TRIBE_A	epuckController.c	60;"	d	file:
TRIBE_B	epuckController.c	61;"	d	file:
WHEEL_RADIUS	epuckController.c	43;"	d	file:
compute_time_step	epuckController.c	/^void compute_time_step() {$/;"	f
compute_wheel_speeds	epuckController.c	/^void compute_wheel_speeds(int *msl, int *msr) $/;"	f
e_puck_matrix	epuckController.c	/^int e_puck_matrix[16] = {17,29,34,10,8,-38,-56,-76,-72,-58,-36,8,10,36,28,18}; \/\/ Maze$/;"	v
getselector	epuckController.c	/^int getselector()$/;"	f
limit_duo_proportional	epuckController.c	/^void limit_duo_proportional(int *number_1, int *number_2, int limit) {$/;"	f
main	epuckController.c	/^int main(){ $/;"	f
migr	epuckController.c	/^float migr[2] = {0.0,-10.0};	        \/\/ Migration vector$/;"	v
my_position	epuckController.c	/^float my_position[3];     		\/\/ X, Z, Theta of the current robot$/;"	v
my_tribe	epuckController.c	/^int my_tribe;$/;"	v
prev_my_position	epuckController.c	/^float prev_my_position[3];  		\/\/ X, Z, Theta of the current robot in the previous time step$/;"	v
prev_relative_pos	epuckController.c	/^float prev_relative_pos[FLOCK_SIZE][3];	\/\/ Previous relative  X, Z, Theta values of our tribe$/;"	v
process_received_ping_messages	epuckController.c	/^void process_received_ping_messages(void)$/;"	f
relative_pos	epuckController.c	/^float relative_pos[FLOCK_SIZE][3];	\/\/ relative X, Z, Theta of all robots of our tribe$/;"	v
relative_speed	epuckController.c	/^float relative_speed[FLOCK_SIZE][2];	\/\/ Speeds calculated with Reynold's rules of our tribe$/;"	v
reset	epuckController.c	/^static void reset() $/;"	f	file:
reynolds_rules	epuckController.c	/^void reynolds_rules() {$/;"	f
robot_id	epuckController.c	/^int robot_id;	\/\/ Unique robot ID$/;"	v
send_ping	epuckController.c	/^void send_ping(void)  $/;"	f
speed	epuckController.c	/^float speed[FLOCK_SIZE][2];		\/\/ Speeds calculated with Reynold's rules of our tribe$/;"	v
time_step	epuckController.c	/^double time_step;$/;"	v
update_self_motion	epuckController.c	/^void update_self_motion(int msl, int msr) { $/;"	f
